module optics.

import data/nat.
import data/sigma.
import data/vec.

import functor.
import util.

Lens : ★ ➔ ★ ➔ ★
= λ S: ★. λ A: ★. ∀ F: ★ ➔ ★. Functor ·F ➔ (A ➔ F ·A) ➔ S ➔ F ·S.

lens : ∀ S: ★. ∀ A: ★. (S ➔ A) ➔ (A ➔ S ➔ S) ➔ Lens ·S ·A
= Λ S. Λ A. λ get. λ set. Λ F. λ lift. λ f. λ s. lift ·A ·S (flip set s) (f (get s)).

get : ∀ S: ★. ∀ A: ★. Lens ·S ·A ➔ S ➔ A
= Λ S. Λ A. λ l. l (lift-const ·A) (id ·A).

over : ∀ S: ★. ∀ A: ★. Lens ·S ·A ➔ (A ➔ A) ➔ S ➔ S
= Λ S. Λ A. λ l. λ f. l lift-id f.

set : ∀ S: ★. ∀ A: ★. Lens ·S ·A ➔ A ➔ S ➔ S
= Λ S. Λ A. λ l. λ x. over l (const x).

first : ∀ A: ★. ∀ B: ★. Lens ·(Pair ·A ·B) ·A
= Λ A. Λ B. Λ F. λ lift. λ f. λ p. μ' p {
  | pair x y ➔ lift ·A ·(Pair ·A ·B) (λ x. pair x y) (f x)
  }.

second : ∀ A: ★. ∀ B: ★. Lens ·(Pair ·A ·B) ·B
= Λ A. Λ B. Λ F. λ lift. λ f. λ p. μ' p {
  | pair x y ➔ lift ·B ·(Pair ·A ·B) (λ y. pair x y) (f y)
  }.

head : ∀ A: ★. ∀ n: Nat. Lens ·(Vec ·A (succ n)) ·A
= Λ A. Λ n. Λ F. λ lift. λ f. λ v. μ' v @ λ i: Nat. λ _: Vec ·A i. {i ≃ succ n} ➾ F ·(Vec ·A i) {
  | vnil ➔ Λ p. δ - p
  | vcons -n x xs ➔ Λ _. lift (λ y: A. vcons -n y xs) (f x)
  } -β.
